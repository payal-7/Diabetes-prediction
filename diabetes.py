# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rvzGveW7JQWPgbciEI4mP3MtmNSOHb5n
"""
import pandas as pd

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
df=pd.read_csv('diabetes.csv')

df.head()

df.dtypes

df.isnull().sum()

x=df.drop('Outcome',axis=1)
y=df['Outcome']

x.head()

y.head()

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_scaler=scaler.fit_transform(x)
x_scaler[:1]

x_scaler=pd.DataFrame(x_scaler,columns=x.columns)
x_scaler.head()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x_scaler,y,test_size=0.2,random_state=0)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(x_train,y_train)

lr.score(x_test,y_test)*100

from sklearn.linear_model import LinearRegression
lir=LinearRegression()
lir.fit(x_train,y_train)

lir.score(x_test,y_test)*100

from sklearn.naive_bayes import GaussianNB
nb_clf=GaussianNB()

nb_clf.fit(x_train,y_train)

nb_clf.score(x_test,y_test)*100

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier(criterion='entropy',max_depth=5,min_samples_split=10,min_samples_leaf=5)
dt.fit(x_train,y_train)

dt.score(x_test,y_test)*100

import joblib
joblib.dump(lr,'lr_model.pkl')

joblib.dump(scaler,'scaler_model.pkl')

df.columns

df['Pregnancies'].value_counts()

df.shape

df.head()

df['Pregnancies']

df['Glucose'].value_counts()

df.sort_values('Glucose')

df['BloodPressure'].value_counts()

df.sort_values('BloodPressure',ascending=False)

df['SkinThickness'].value_counts()

df.sort_values('SkinThickness',ascending=False)

df['Insulin'].value_counts()

df.sort_values('Insulin',ascending=False)

df['BMI'].value_counts()

df.sort_values('BMI',ascending=False)

df['DiabetesPedigreeFunction'].value_counts()

df.sort_values('DiabetesPedigreeFunction',ascending=False)

df['Age'].value_counts()

df.sort_values('Age',ascending=False)

